/******/ (function() { // webpackBootstrap
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
!function() {
"use strict";
var __webpack_exports__ = {};
/*!***************************************!*\
  !*** ./scss/blocks/info_numbers.scss ***!
  \***************************************/
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin

}();
// This entry need to be wrapped in an IIFE because it need to be isolated against other entry modules.
!function() {
/*!***********************************!*\
  !*** ./js/blocks/info_numbers.js ***!
  \***********************************/
document.addEventListener('DOMContentLoaded', function () {
  var numberElements = document.querySelectorAll('.infonumber_card .title');
  function animateCount(element, start, end, duration, suffix, decimalPart) {
    var startTimestamp = null;
    var step = function step(timestamp) {
      if (!startTimestamp) startTimestamp = timestamp;
      var progress = Math.min((timestamp - startTimestamp) / duration, 1);
      // Animate only the whole number part
      element.textContent = Math.floor(progress * (end - start) + start);
      if (progress < 1) {
        window.requestAnimationFrame(step);
      } else {
        // After the animation ends, attach the decimals and suffix
        element.textContent += decimalPart.trim() + suffix.trim();
      }
    };
    window.requestAnimationFrame(step);
  }
  function getNumberAndSuffix(value) {
    var numberPart = parseFloat(value); // Extract the numeric part
    var decimalPart = value.includes('.') ? value.split('.')[1] : ''; // Get the decimal part
    var suffix = '';
    if (decimalPart) {
      suffix = '';
    } else {
      suffix = value.replace(/[0-9.]/g, ''); // Extract the suffix part (K, M, etc.)
    }

    return {
      number: Math.floor(numberPart),
      // Use only the whole number for counting
      suffix: suffix,
      decimalPart: decimalPart ? '.' + decimalPart : '' // Add the decimal point back if necessary
    };
  }

  var observer = new IntersectionObserver(function (entries, observer) {
    entries.forEach(function (entry) {
      if (entry.isIntersecting) {
        var numberElement = entry.target;
        var _getNumberAndSuffix = getNumberAndSuffix(numberElement.textContent),
          number = _getNumberAndSuffix.number,
          suffix = _getNumberAndSuffix.suffix,
          decimalPart = _getNumberAndSuffix.decimalPart;
        animateCount(numberElement, 0, number, 2000, suffix, decimalPart);
        observer.unobserve(numberElement); // Stop observing after animation
      }
    });
  }, {
    threshold: 0.5 // Trigger when 50% of the element is visible
  });

  numberElements.forEach(function (el) {
    observer.observe(el);
  });
});
}();
/******/ })()
;